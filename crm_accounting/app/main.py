# app/main.py
import logging
from fastapi import FastAPI
from fastapi.staticfiles import StaticFiles
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import HTMLResponse

from app.core.database import _main_engine, check_and_create_tables, get_main_db
from app.routes import (
    auth,
    admin,
    client_auth,
    client_dashboard,
    client_clients,
    client_reports,
    client_users,
    calendar,
    calendar_handbook,
    client_settings,
    client_organizations,  # ‚úÖ –¥–æ–±–∞–≤–ª–µ–Ω –º–∞—Ä—à—Ä—É—Ç
)
from app.utils import templates

# ------------------------------------------------------------
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
# ------------------------------------------------------------
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(name)s - %(message)s",
)
logger = logging.getLogger(__name__)

# ------------------------------------------------------------
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI
# ------------------------------------------------------------
app = FastAPI(title="CRM Accounting", version="2.0")

# ------------------------------------------------------------
# Middleware (CORS)
# ------------------------------------------------------------
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# ------------------------------------------------------------
# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏–∫–∏
# ------------------------------------------------------------
app.mount("/static", StaticFiles(directory="app/static"), name="static")

# ------------------------------------------------------------
# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤
# ------------------------------------------------------------
app.include_router(auth.router, prefix="/api", tags=["auth"])
app.include_router(admin.router, prefix="/api/admin", tags=["admin"])

# –ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è —á–∞—Å—Ç—å
app.include_router(client_auth.router, tags=["client_auth"])
app.include_router(client_dashboard.router, tags=["client_dashboard"])
app.include_router(client_clients.router, tags=["client_clients"])
app.include_router(client_reports.router, tags=["client_reports"])
app.include_router(client_users.router, tags=["client_users"])
app.include_router(calendar.router, tags=["calendar"])
app.include_router(calendar_handbook.router, tags=["calendar_handbook"])
app.include_router(client_settings.router, tags=["client_settings"])
app.include_router(client_organizations.router, tags=["client_organizations"])

# ------------------------------------------------------------
# –°–æ–±—ã—Ç–∏—è —Å—Ç–∞—Ä—Ç–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
# ------------------------------------------------------------
@app.on_event("startup")
def startup_event():
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ.
    """
    try:
        logger.info("üöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞/—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –æ—Å–Ω–æ–≤–Ω–æ–π –ë–î...")
        check_and_create_tables()
        logger.info("‚úÖ –û—Å–Ω–æ–≤–Ω–∞—è –ë–î –≥–æ—Ç–æ–≤–∞.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")


@app.on_event("shutdown")
def shutdown_event():
    logger.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.")


# ------------------------------------------------------------
# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
# ------------------------------------------------------------
from fastapi import Request
from fastapi.responses import HTMLResponse
from starlette.templating import _TemplateResponse  # –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ –¥–ª—è —Ç–∏–ø–æ–≤

@app.get("/", response_class=HTMLResponse)
async def index(request: Request):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É (index.html)
    """
    return templates.TemplateResponse(
        "index.html",
        {"request": request}
    )



# ------------------------------------------------------------
# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
# ------------------------------------------------------------
if __name__ == "__main__":
    import uvicorn

    uvicorn.run("app.main:app", host="0.0.0.0", port=8000, reload=True)
